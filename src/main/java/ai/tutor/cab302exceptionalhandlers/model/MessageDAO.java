package ai.tutor.cab302exceptionalhandlers.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Manages {@code Message} entities for chat sessions.
 * <p>
 * This Data Access Object (DAO) provides methods to perform CRUD operations on the
 * {@code messages} table in the SQLite database. Messages represent user inputs or AI
 * responses within a chat session, identified by a chat ID, and support learning features
 * such as quiz delivery and feedback.
 *
 * @author Jack
 */

public class MessageDAO implements IMessageDAO {
    private final Connection connection;

    /**
     * Initialises the {@code MessageDAO} with an SQLite database connection.
     * <p>
     * This constructor establishes a connection using the provided {@code SQLiteConnection}
     * and creates the {@code messages} table if it does not exist. The table includes a
     * foreign key to the {@code chats} table with cascading deletion to ensure messages
     * are removed when their associated chat is deleted.
     *
     * @param sqliteConnection the {@code SQLiteConnection} instance for database access
     * @throws SQLException if a database error occurs during initialisation
     * @throws RuntimeException if the SQLite connection cannot be established
     */

    public MessageDAO(SQLiteConnection sqliteConnection) throws SQLException, RuntimeException {
        connection = sqliteConnection.getInstance();
        createTable();
    }

    /**
     * Creates the {@code messages} table in the SQLite database.
     * <p>
     * This method defines the schema for the {@code messages} table, including columns for
     * message ID, chat ID, content, sender type (user or AI), and a flag indicating if the
     * message is a quiz. The table uses an auto-incrementing primary key and a foreign key
     * to the {@code chats} table with cascading deletion.
     *
     * @throws SQLException if a database error occurs during table creation
     */

    private void createTable() throws SQLException {
        try (Statement createTable = connection.createStatement()) {
            createTable.execute(
                    "CREATE TABLE IF NOT EXISTS messages ("
                    + "id INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + "chatId INTEGER NOT NULL,"
                    + "content VARCHAR NOT NULL,"
                    + "fromUser INTEGER NOT NULL,"
                    + "isQuiz INTEGER NOT NULL,"
                    + "FOREIGN KEY(chatId) REFERENCES chats(id) ON DELETE CASCADE"
                    + ")"
            );
        }
    }

    /**
     * Saves a new {@code Message} entity to the database.
     * <p>
     * This method inserts a {@code Message} entity into the {@code messages} table, storing
     * its chat ID, content, sender type (user or AI), and quiz flag. The message ID is
     * automatically generated by the SQLite database and set on the {@code Message} entity
     * to ensure uniqueness.
     *
     * @param message the {@code Message} entity to save
     * @throws SQLException if a database error occurs during insertion
     */

    @Override
    public void createMessage(Message message) throws SQLException {
        String sql = "INSERT INTO messages (chatId, content, fromUser, isQuiz) VALUES (?, ?, ?, ?)";
        try (PreparedStatement createMessage = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            createMessage.setInt(1, message.getChatId());
            createMessage.setString(2, message.getContent());
            createMessage.setInt(3, message.getFromUser() ? 1 : 0);
            createMessage.setInt(4, message.getIsQuiz() ? 1 : 0);
            createMessage.executeUpdate();

            try (ResultSet generatedKeys = createMessage.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    message.setId(generatedKeys.getInt(1));
                }
            }
        }
    }


    /**
     * Retrieves all {@code Message} entities for a specific chat session.
     * <p>
     * This method fetches all messages associated with a given chat ID from the
     * {@code messages} table. It returns a list of messages, which may be empty if no
     * messages exist.
     *
     * @param chatId the ID of the chat session
     * @return a {@code List} of {@code Message} entities for the chat, or an empty list if none exist
     * @throws IllegalArgumentException if {@code chatId} is negative
     * @throws SQLException if a database error occurs during retrieval
     */

    @Override
    public List<Message> getAllChatMessages(int chatId) throws IllegalArgumentException, SQLException {
        List<Message> chatMessages = new ArrayList<>();
        String sql = "SELECT * FROM messages WHERE chatId = ?";
        try (PreparedStatement readChatMessages = connection.prepareStatement(sql)) {
            readChatMessages.setInt(1, chatId);
            ResultSet resultSet = readChatMessages.executeQuery();

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String content = resultSet.getString("content");
                int fromUser = resultSet.getInt("fromUser");
                int isQuiz = resultSet.getInt("isQuiz");
                Message message = new Message(chatId, content, fromUser == 1, isQuiz == 1);
                message.setId(id);
                chatMessages.add(message);
            }
        }
        return chatMessages;
    }
}
