package ai.tutor.cab302exceptionalhandlers.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Manages {@code Chat} entities for user-specific chat sessions.
 * <p>
 * This Data Access Object (DAO) provides methods to perform CRUD operations on the
 * {@code chats} table in the SQLite database. Each chat is associated with a user
 * and stores their name and preferences such as response attitude, quiz difficulty,
 * quizLength, educationLevel and study area.
 *
 * @author Jack
 */

public class ChatDAO implements IChatDAO {
    private final Connection connection;

    /**
     * Initialises the {@code ChatDAO} with an SQLite database connection.
     * <p>
     * This constructor creates a connection using the {@code SQLiteConnection} and creates
     * the {@code chats} table if it does not exist. The table includes columns for chat ID,
     * user ID, name, response attitude, quiz difficulty, quiz length, education level,
     * and study area, with a foreign key to the {@code users} table.
     *
     * @param sqliteConnection the {@code SQLiteConnection} instance for database access
     * @throws SQLException if a database error occurs during initialization
     * @throws RuntimeException if the SQLite connection cannot be established
     */

    public ChatDAO(SQLiteConnection sqliteConnection) throws SQLException, RuntimeException {
        connection = sqliteConnection.getInstance();
        createTable();
    }

    /**
     * Creates the {@code chats} table in the SQLite database.
     * <p>
     * This method defines the schema for the {@code chats} table, including an auto-incrementing
     * primary key and a foreign key to the {@code users} table with cascading deletion. The table
     * stores chat preferences to customize quiz generation and AI responses.
     *
     * @throws SQLException if a database error occurs during table creation
     */

    private void createTable() throws SQLException {
        try (Statement createTable = connection.createStatement()) {
            createTable.execute(
                    "CREATE TABLE IF NOT EXISTS chats ("
                    + "id INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + "userId INTEGER NOT NULL,"
                    + "name VARCHAR NOT NULL,"
                    + "responseAttitude VARCHAR NOT NULL,"
                    + "quizDifficulty VARCHAR NOT NULL,"
                    + "quizLength INTEGER NOT NULL,"
                    + "educationLevel VARCHAR,"
                    + "studyArea VARCHAR,"
                    + "FOREIGN KEY(userId) REFERENCES users(id) ON DELETE CASCADE"
                    + ")"
            );
        }
    }

    /**
     * Saves a new {@code Chat} to the database.
     * <p>
     * This method inserts a {@code Chat} into the {@code chats} table, storing its user ID,
     * name, response attitude, quiz difficulty, quiz length, education level, and study area.
     * The chat ID is automatically generated by the SQLite database and set on the {@code Chat}
     * object to ensure uniqueness.
     *
     * @param chat the {@code Chat} object to save
     * @throws IllegalArgumentException if {@code chat} is {@code null} or has invalid fields
     * @throws SQLException if a database error occurs during insertion
     */

    @Override
    public void createChat(Chat chat) throws IllegalArgumentException, SQLException {
        String sql = "INSERT INTO chats (userId, name, responseAttitude, quizDifficulty, quizLength, educationLevel, studyArea) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement createChat = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            createChat.setInt(1, chat.getUserId());
            createChat.setString(2, chat.getName());
            createChat.setString(3, chat.getResponseAttitude());
            createChat.setString(4, chat.getQuizDifficulty());
            createChat.setInt(5, chat.getQuizLength());
            createChat.setString(6, chat.getEducationLevel());
            createChat.setString(7, chat.getStudyArea());
            createChat.executeUpdate();

            // Set the id of the new Chat
            try (ResultSet generatedKeys = createChat.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    chat.setId(generatedKeys.getInt(1));
                }
            }
        }
    }

    /**
     * Updates an existing {@code Chat} in the database.
     * <p>
     * This method updates the name, response attitude, quiz difficulty, quiz length,
     * education level, and study area of a {@code Chat} identified by its ID. It ensures
     * the chatâ€™s preferences are kept up-to-date when new values are set by the user.
     *
     * @param chat the {@code Chat} object with updated fields
     * @throws IllegalArgumentException if {@code chat} is {@code null} or has invalid fields
     * @throws SQLException if a database error occurs during update
     */

    @Override
    public void updateChat(Chat chat) throws SQLException {
        String sql = "UPDATE chats SET name = ?, responseAttitude = ?, quizDifficulty = ?, quizLength = ?, educationLevel = ?, studyArea = ? WHERE id = ?";
        try (PreparedStatement updateChat = connection.prepareStatement(sql)) {
            updateChat.setString(1, chat.getName());
            updateChat.setString(2, chat.getResponseAttitude());
            updateChat.setString(3, chat.getQuizDifficulty());
            updateChat.setInt(4, chat.getQuizLength());
            updateChat.setString(5, chat.getEducationLevel());
            updateChat.setString(6, chat.getStudyArea());
            updateChat.setInt(7, chat.getId());
            updateChat.executeUpdate();
        }
    }

    /**
     * Updates the name of an existing {@code Chat} in the database.
     * <p>
     * This method modifies only the name of a {@code Chat} identified by its ID, allowing
     * users to rename chat sessions without affecting other preferences.
     *
     * @param chat the {@code Chat} object with the updated name
     * @throws IllegalArgumentException if {@code chat} is {@code null} or has an invalid name
     * @throws SQLException if a database error occurs during update
     */

    @Override
    public void updateChatName(Chat chat) throws SQLException {
        String sql = "UPDATE chats SET name = ? WHERE id = ?";
        try (PreparedStatement updateChatName = connection.prepareStatement(sql)) {
            updateChatName.setString(1, chat.getName());
            updateChatName.setInt(2, chat.getId());
            updateChatName.executeUpdate();
        }
    }

    /**
     * Deletes a {@code Chat} from the database.
     * <p>
     * This method removes a {@code Chat} identified by its ID from the {@code chats} table.
     * Cascading deletion, configured in the database schema, ensures associated data such as
     * quiz questions and answer options is also removed.
     *
     * @param chat the {@code Chat} object to delete
     * @throws IllegalArgumentException if {@code chat} is {@code null} or has an invalid ID
     * @throws SQLException if a database error occurs during deletion
     */

    @Override
    public void deleteChat(Chat chat) throws SQLException {
        String sql = "DELETE FROM chats WHERE id = ?";
        try (PreparedStatement deleteChat = connection.prepareStatement(sql)) {
            deleteChat.setInt(1, chat.getId());
            deleteChat.executeUpdate();
        }
    }

    /**
     * Retrieves a {@code Chat} by its ID.
     * <p>
     * This method fetches a {@code Chat} from the {@code chats} table using the provided ID.
     * It returns the chat with all its attributes, or {@code null} if no chat exists, supporting
     * the retrieval of user-specific chat sessions.
     *
     * @param id the unique identifier of the {@code Chat}
     * @return the {@code Chat} object if found, or {@code null} if no chat exists
     * @throws IllegalArgumentException if {@code id} is negative
     * @throws SQLException if a database error occurs during retrieval
     */

    @Override
    public Chat getChat(int id) throws IllegalArgumentException, SQLException {
        String sql = "SELECT * FROM chats WHERE id = ?";
        try (PreparedStatement readChat = connection.prepareStatement(sql)) {
            readChat.setInt(1, id);
            ResultSet resultSet = readChat.executeQuery();

            if (resultSet.next()) {
                int userId = resultSet.getInt("userId");
                String name = resultSet.getString("name");
                String responseAttitude = resultSet.getString("responseAttitude");
                String quizDifficulty = resultSet.getString("quizDifficulty");
                int quizLength = resultSet.getInt("quizLength");
                String educationLevel = resultSet.getString("educationLevel");
                String studyArea = resultSet.getString("studyArea");
                Chat chat = new Chat(userId, name, responseAttitude, quizDifficulty, quizLength, educationLevel, studyArea);
                chat.setId(id);
                return chat;
            }
        }
        return null;
    }

    /**
     * Retrieves all {@code Chat} objects for a specific user.
     * <p>
     * This method fetches all chats associated with a given user ID from the {@code chats}
     * table. It returns a list of chats, which may be empty if no chats exist.
     *
     * @param userId the ID of the user
     * @return a {@code List} of {@code Chat} objects for the user, or an empty list if none exist
     * @throws IllegalArgumentException if {@code userId} is negative
     * @throws SQLException if a database error occurs during retrieval
     */

    @Override
    public List<Chat> getAllUserChats(int userId) throws IllegalArgumentException, SQLException {
        List<Chat> userChats = new ArrayList<>();
        String sql = "SELECT * FROM chats WHERE userId = ?";
        try (PreparedStatement readUserChats = connection.prepareStatement(sql)) {
            readUserChats.setInt(1, userId);
            ResultSet resultSet = readUserChats.executeQuery();

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String responseAttitude = resultSet.getString("responseAttitude");
                String quizDifficulty = resultSet.getString("quizDifficulty");
                int quizLength = resultSet.getInt("quizLength");
                String educationLevel = resultSet.getString("educationLevel");
                String studyArea = resultSet.getString("studyArea");
                Chat chat = new Chat(userId, name, responseAttitude, quizDifficulty, quizLength, educationLevel, studyArea);
                chat.setId(id);
                userChats.add(chat);
            }
        }
        return userChats;
    }
}
