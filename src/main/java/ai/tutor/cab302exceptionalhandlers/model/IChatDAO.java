package ai.tutor.cab302exceptionalhandlers.model;

import java.sql.SQLException;
import java.util.List;

/**
 * Outlines the contract for managing {@code Chat} entities.
 * <p>
 * This interface defines methods for performing CRUD operations on chat sessions in the
 * SQLite database. Each chat is associated with a user and stores preferences such as
 * response attitude, quiz difficulty, and study area.
 *
 * @author Jack
 */

public interface IChatDAO {

    /**
     * Saves a new {@code Chat} entity to the database.
     * <p>
     * This method inserts a {@code Chat} entity into the database, storing its user ID,
     * name, response attitude, quiz difficulty, quiz length, education level, and study
     * area. The chat ID is automatically generated by the SQLite database and set on the
     * {@code Chat} to ensure uniqueness.
     *
     * @param chat the {@code Chat} entity to save
     * @throws SQLException if a database error occurs during insertion
     */

    public void createChat(Chat chat) throws SQLException;

    /**
     * Updates an existing {@code Chat} entity in the database.
     * <p>
     * This method updates the name, response attitude, quiz difficulty, quiz length,
     * education level, and study area of a {@code Chat} entity identified by its ID.
     * Implementations must ensure the chatâ€™s preferences are kept up-to-date when
     * new values are set by the user.
     *
     * @param chat the updated {@code Chat} entity
     * @throws SQLException if a database error occurs during update
     */

    public void updateChat(Chat chat) throws SQLException;

    /**
     * Updates the name of an existing {@code Chat} entity in the database.
     * <p>
     * This method modifies only the name of a {@code Chat} entity identified by its ID,
     * allowing users to rename chat sessions without affecting other preferences.
     *
     * @param chat the {@code Chat} entity with the updated name
     * @throws SQLException if a database error occurs during update
     */

    public void updateChatName(Chat chat) throws SQLException;

    /**
     * Deletes a {@code Chat} entity from the database.
     * <p>
     * This method removes a {@code Chat} entity identified by its ID from the database.
     * Cascading deletion, configured in the database schema, ensures associated data such
     * as quiz questions and answer options is also removed.
     *
     * @param chat the {@code Chat} entity to delete
     * @throws SQLException if a database error occurs during deletion
     */

    public void deleteChat(Chat chat) throws SQLException;

    /**
     * Retrieves a {@code Chat} entity by its ID.
     * <p>
     * This method fetches a {@code Chat} entity from the database using the provided ID.
     * It returns the {@code Chat} entity with all its attributes, or {@code null} if no chat exists.
     *
     * @param id the unique identifier of the {@code Chat} entity
     * @return the {@code Chat} entity if found, or {@code null} if no chat exists
     * @throws SQLException if a database error occurs during retrieval
     */

    public Chat getChat(int id) throws SQLException;

    /**
     * Retrieves all {@code Chat} entities for a specific user.
     * <p>
     * This method fetches all chat entities associated with a given user ID from the
     * database. It returns a list of chats, which may be empty if no chats exist.
     *
     * @param userId the ID of the user
     * @return a {@code List} of {@code Chat} entities for the user, or an empty list if none exist
     * @throws SQLException if a database error occurs during retrieval
     */

    public List<Chat> getAllUserChats(int userId) throws SQLException;
}
